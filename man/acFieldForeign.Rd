% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic.R, R/rezrDF_easy.R, R/rezrObj_easy.R
\name{addFieldForeign}
\alias{addFieldForeign}
\alias{changeFieldForeign}
\alias{addFieldForeign.rezrDF}
\alias{changeFieldForeign.rezrDF}
\alias{addFieldForeign.rezrObj}
\alias{changeFieldForeign.rezrObj}
\title{Easily add a field to / change a field in a rezrDF using information from another rezrDF. Has two variants that may be applied to rezrDFs or rezrObjs,}
\usage{
addFieldForeign(x, ...)

changeFieldForeign(x, ...)

\method{addFieldForeign}{rezrDF}(
  targetDF,
  sourceDF,
  targetForeignKeyName,
  targetFieldName = "",
  sourceFieldName = "",
  type = "simple",
  fieldaccess = "flex",
  complexAction = NULL,
  targetNodeMap = NULL
)

\method{changeFieldForeign}{rezrDF}(
  targetDF,
  sourceDF,
  targetForeignKeyName,
  targetFieldName = "",
  sourceFieldName = "",
  type = "simple",
  fieldaccess = "flex",
  complexAction = NULL,
  targetNodeMap = NULL
)

\method{addFieldForeign}{rezrObj}(
  rezrObj,
  targetEntity,
  targetLayer = "",
  sourceEntity,
  sourceLayer = "",
  targetForeignKeyName,
  targetFieldName = "",
  sourceFieldName = "",
  type = "simple",
  fieldaccess = "flex",
  complexAction = NULL,
  sourceKeyName = ""
)

\method{changeFieldForeign}{rezrObj}(
  rezrObj,
  targetEntity,
  targetLayer = "",
  sourceEntity,
  sourceLayer = "",
  targetForeignKeyName,
  targetFieldName = "",
  sourceFieldName = "",
  type = "simple",
  fieldaccess = "flex",
  complexAction = NULL
)
}
\arguments{
\item{targetDF}{The rezrDF you will be changing.}

\item{sourceDF}{The rezrDF you will be getting information from.}

\item{targetForeignKeyName}{The name of the field in the target DF that corresponds to the key (ID) of the source DF. If type = "simple", this is a column in the rezrDF. If type = "complex", this is a field in the target node map, and targetNodeMap must be specified.}

\item{targetFieldName}{The name of the field you want to add / change.}

\item{sourceFieldName}{The name of the field in the source rezrDF that you will be pulling information from.}

\item{type}{If "simple", each row of the target DF gets information from only one row of the source DF. If "complex", each row of the target DF gets information from multiple rows of the source DF.}

\item{fieldaccess}{The field access value you want to set to the new / changed field.}

\item{complexAction}{When type = "complex", the action that will aggregate the values from the source DF together. See \link{concatenateAll} for ideas.}

\item{targetNodeMap}{The node map corresponding to the target DF. It only needs to be specified when type = "complex".}

\item{rezrObj}{The rezrObj that you will be changing.}

\item{targetEntity}{The Rezonator entity that you will be changing (e.g. token, unit, entry ...)}

\item{targetLayer}{The layer of the Rezonator entity that you will be changing from. Leave blank for entities without layers (e.g. token, entry and unit). If you don't have layers for entities that may have layers (i.e. track, rez, chunk), type 'default'.}

\item{sourceEntity}{The Rezonator entity that you will be getting your information from.}

\item{sourceLayer}{The layer of the Rezonator entity that you will be changing from. Leave blank for entities without layers (e.g. token, entry and unit). If you don't have layers for entities that may have layers (i.e. track, rez, chunk), type 'default'.}
}
\value{
When applied on a rezrDF, a rezrDF object with the added / changed field.

When applied on a rezrObj, the rezrObj with the change applied on the rezrDF.
}
\description{
Easily add a field to / change a field in a rezrDF using information from another rezrDF. Has two variants that may be applied to rezrDFs or rezrObjs,
}
\note{
There are no major differences between rezrDFs and rezrObjs. However, only the rezrDF variant can be applied on emancipated rezrDFs (rezrDFs that do not belong to a rezrObj), whereas the rezrObj variant is more elegant when working with rezrDFs within a rezrObj.
}
