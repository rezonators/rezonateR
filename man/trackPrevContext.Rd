% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/track.R, R/track_bridge.R
\name{lastMentionUnit}
\alias{lastMentionUnit}
\alias{unitsToLastMention}
\alias{lastMentionToken}
\alias{tokensToLastMention}
\alias{countPrevMentions}
\alias{countPrevMentionsIf}
\alias{countPrevMentionsMatch}
\alias{getPrevMentionField}
\alias{nextMentionUnit}
\alias{unitsToNextMention}
\alias{nextMentionToken}
\alias{tokensToNextMention}
\alias{countNextMentions}
\alias{countNextMentionsIf}
\alias{countNextMentionsMatch}
\alias{getNextMentionField}
\alias{countPrevBridges}
\title{Functions related to mentions of the same entity in previous/following context in track chains.}
\usage{
lastMentionUnit(unitSeq = NULL, chain = NULL)

unitsToLastMention(unitSeq = NULL, chain = NULL)

lastMentionToken(tokenOrder = NULL, chain = NULL)

tokensToLastMention(
  tokenOrder = NULL,
  chain = NULL,
  zeroProtocol = "literal",
  zeroCond = NULL,
  unitSeq = NULL,
  unitDF = NULL
)

countPrevMentions(windowSize, unitSeq = NULL, chain = NULL)

countPrevMentionsIf(windowSize, cond, unitSeq = NULL, chain = NULL)

countPrevMentionsMatch(windowSize, field, unitSeq = NULL, chain = NULL)

getPrevMentionField(field, tokenOrder = NULL, chain = NULL)

nextMentionUnit(unitSeq = NULL, chain = NULL)

unitsToNextMention(unitSeq = NULL, chain = NULL)

nextMentionToken(tokenOrder = NULL, chain = NULL)

tokensToNextMention(
  tokenOrder = NULL,
  chain = NULL,
  zeroProtocol = "literal",
  zeroCond = NULL,
  unitSeq = NULL,
  unitDF = NULL
)

countNextMentions(windowSize, unitSeq = NULL, chain = NULL)

countNextMentionsIf(windowSize, cond, unitSeq = NULL, chain = NULL)

countNextMentionsMatch(windowSize, field, unitSeq = NULL, chain = NULL)

getNextMentionField(field, tokenOrder = NULL, chain = NULL)

countPrevBridges(
  windowSize,
  frameMatrix,
  unitSeq = NULL,
  chain = NULL,
  inclRelations = NULL
)
}
\arguments{
\item{unitSeq}{The vector of tokenOrder values where the mentions appeared. You can choose tokenOrderFirst, tokenOrderFirst, or maybe an average of the two. By default it's tokenOrderFirst.}

\item{chain}{The chain that each mention belongs to.}

\item{tokenOrder}{The vector of sequence values values where the mentions appeared. Common choices are docTokenSeqFirst, docTokenSeqLast, wordTokenSeqFirst and wordTokenseqLast (the last two are available after running \link{addIsWordField} on a rezrObj. By default it's docTokenSeqLast.}

\item{zeroProtocol}{If 'literal', I will take the seq values of the zeroes at face value. (If you set zeros as non-words and use docWordSeqFirst or discourseWordSeLast as your tokenOrder, this will lead to meaningless values.) If 'unitFinal', I will treat zeroes as if they were the final word of the unit. If 'unitFirst', I will treat zeroes as if they were the first word of the unit.}

\item{zeroCond}{A condition for determining whether a token is zero. For most people, this should be (word column) == "<0>".}

\item{windowSize}{The size of the window in which you will be counting.}

\item{cond}{For if functions, the condition that the previous / next mention must satisfy. It cannot refer to the current mention.}

\item{field}{The field whose value you want to match or extract.}
}
\description{
See also \link{countCompetitors}.
}
